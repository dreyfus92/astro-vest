---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Welcome to Astro.">
  <main class="py-28">
    <div class="pb-10">
      <h1>Astro + Vest</h1>
      <p class="text-center">Just leave a message</p>
    </div>
    <form
      class="flex flex-col justify-center items-center bg-slate-600 rounded-md w-fit mx-auto p-20"
    >
      <div class="form-input">
        <label for="name">Name</label>
        <input type="text" id="name" name="name" class="validation-message" />
      </div>
      <div class="form-input">
        <label for="email">Email</label>
        <input
          type="email"
          id="email"
          name="email"
          class="validation-message"
        />
      </div>
      <div class="form-input">
        <label for="message">Message</label>
        <input id="message" name="message" class="validation-message" />
      </div>
      <button
        type="submit"
        class="btn-submit py-2 px-4 bg-red-400 w-fit mt-8 rounded-lg"
        disabled="disabled">Submit</button
      >
    </form>
  </main>
</Layout>

<script src="../scripts/validation.ts"></script>

<!-- <script>
  import suite from "../scripts/validation";
  import classnames from "vest/classnames";

  const form = document.querySelector("form");
  const submit = form?.querySelector("button[type=submit]");

  const allInputs = Array.from(form!.querySelectorAll("input"));
  const formValues = {}; //state

  const handleChange = (e: KeyboardEvent) => {
    const { name, value, checked } = e.target as HTMLInputElement;
    Object.assign(formValues, {
      [name]: { value, checked },
    });
    const res = suite(formValues, name).done(handleResult);

    res.isValid()
      ? submit?.removeAttribute("disabled")
      : submit?.setAttribute("disabled", "disabled");
  };

  const handleSubmit = async () => {
    // Here we're organizing the input values in an on object
    // so that we can pass it over to our validation module

    const allData = allInputs.reduce(
      (allData, current) =>
        Object.assign(allData, {
          [current.name]: current,
        }),
      {}
    );

    // run our validation suite with the values of all inputs
    // And after that handle the results
    suite(allData, {}).done(handleResult);

    // const formData = new FormData(formValues);

    // Post the data to the server
    fetch("/api/form", {
      method: "POST",
      body: JSON.stringify(formValues),
      headers: {
        "Content-Type": "application/json",
      },
    });
  };
  //@ts-ignore
  const handleResult = (result) => {
    const cn = classnames(result, {
      valid: "success",
      invalid: "error",
      warning: "warning",
    });

    // Iterate over all the tested fields in the current validations
    // (Since some may have been skipped)
    allInputs.forEach(({ name }) => {
      // Find the parent element
      const parent = form?.querySelector(`input[name="${name}"]`);

      const formInputContainer = parent?.closest(`.${formInputClassName}`);

      // update the DOM
      formInputContainer!.className = [cn(name), formInputClassName]
        .filter(Boolean)
        .join(" ");

      const msg = formInputContainer?.querySelector(".validation-message");

      if (msg) {
        const messages = [
          ...result.getErrors(name),
          ...result.getWarnings(name),
        ];
        //@ts-ignore
        msg.innerText = messages[0] || "";
      }
    });
  };

  form?.addEventListener("keyup", handleChange);
  form?.addEventListener("submit", (e) => {
    e.preventDefault();
    handleSubmit();
  });

  const formInputClassName = "form-input";
</script> -->
